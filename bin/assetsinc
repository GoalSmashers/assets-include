#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var util = require('util');
var AssetsInclude = require('../index');

var commands = require('commander');

var packageConfig = fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'));
var buildVersion = JSON.parse(packageConfig).version;

commands
  .version(buildVersion, '-v, --version')
  .usage('<options> <group path, name, and type>')
  .option('-a, --asset-hosts [asset-hosts]', 'prefix all paths with given asset host(s)')
  .option('-b, --bundled', 'output a bundled (production) version')
  .option('-s, --cache-boosters', 'use cache boosters')
  .option('-c, --config [config-file]', 'path to assets config file')
  .option('-i, --inline', 'output inline tags')
  .option('-m, --loading-mode [async|defer]', 'use the given loading mode for JavaScript assets')
  .option('-l, --list', 'list mode (prints filenames instead of HTML tags)')
  .option('-r, --root [root-path]', 'root path of all assets (defaults to ./public under config\'s path)');

commands.parse(process.argv);

if (commands.args.length === 0) {
  commands.outputHelp();
  return 0;
}

var locator = commands.args && commands.args[0];
var options = {
  bundled: commands.bundled,
  root: commands.root,
  cacheBoosters: commands.cacheBoosters,
  assetHosts: commands.assetHosts,
  loadingMode: commands.loadingMode
};

var includer = new AssetsInclude(commands.config, options);
if (commands.list)
  util.print(includer.list(locator).join(','));
else
  util.puts(includer[commands.inline ? 'inline' : 'group'](locator));
